---
- name: Install Portainer
  hosts: all

  vars_files:
    - vars.yml
    - vars-private.yml

  pre_tasks:
    - name: Update cache if needed (Debian)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Update packages
      ansible.builtin.package:
        name: "*"
        state: latest

    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
          - ca-certificates
          - curl
          - gnupg
          - git
        state: present

  tasks:
    - name: Ensure docker GPG signing key is installed (Debian)
      ansible.builtin.apt_key:
        url: "{{ docker_ce_deb_gpg }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure docker repository is added (Debian)
      ansible.builtin.apt_repository:
        repo: "{{ docker_ce_deb_repo }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure docker repository is added (RedHat)
      ansible.builtin.yum_repository:
        name: docker-ce
        description: docker-ce repo
        baseurl: "{{ docker_ce_centos_baseurl }}"
        gpgkey: "{{ docker_ce_centos_gpg }}"
      when: ansible_os_family == "RedHat"

    - name: Ensure docker tools are installed
      ansible.builtin.package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Ensure docker service is started and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Ensure web network for Traefik is present
      docker_network:
        name: web
        internal: false
        state: present

    - name: Ensure config files are present on remote
      ansible.builtin.copy:
        src: ./config/
        dest: /root
        mode: "0644"

    - name: Ensure Traefik reverse proxy Docker container is running
      community.docker.docker_container:
        name: traefik
        image: traefik:v2.9
        state: started
        command:
          - --api.insecure=true
          - --log.level=DEBUG
          - --api.dashboard=true
          - --providers.docker=true
          - --providers.docker.exposedbydefault=false
          - --providers.docker.network=web
          - --providers.file.filename=/etc/traefik/dynamic.yml
          - --entrypoints.web.address=:80
          - --accessLog.filePath=/root/access.log
          - --accessLog.format=json
          - --accesslog.fields.headers.defaultmode=keep
          - --accesslog.fields.headers.names.x-request-id=keep
          - --metrics.prometheus=true
          - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
        ports:
          - "80:80"
          - "8080:8080"
          - "443:443"
        restart_policy: always
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /root/traefik.yml:/etc/traefik/dynamic.yml
          - /root/cert-proxmox.crt:/root/cert-proxmox.crt
        networks:
          - name: web

    - name: Ensure Portainer Docker volume is present
      community.docker.docker_volume:
        name: portainer_data

    - name: Ensure Portainer Docker container is running
      community.docker.docker_container:
        name: portainer
        image: portainer/portainer-ce
        state: started
        # ports:
          # - "8000:8000"
          # - "9000:9000"
        networks:
          - name: web
        labels:
          traefik.enable: "true"
          traefik.http.routers.portainer.rule: "Host(`portainer.tbrouwer.com`)"
          traefik.http.routers.portainer.entrypoints: "web"
          traefik.http.routers.portainer.service: "portainer"
          traefik.http.services.portainer.loadbalancer.server.port: "9000"
        restart_policy: always
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data

    - name: Ensure Dashy Docker container is running
      community.docker.docker_container:
        name: dashy
        image: tychobrouwer/dashy-tychobrouwer
        labels:
          traefik.enable: "true"
          traefik.http.routers.dashy.rule: "Host(`dash.tbrouwer.com`)"
          traefik.http.routers.dashy.entrypoints: "web"
        state: started
        # ports:
        #   - "90:80"
        networks:
          - name: web
        volumes:
          - /root/dashy-conf.yml:/app/public/conf.yml
        restart_policy: always

    - name: Ensure Cloudflare DDNS Docker container is running
      community.docker.docker_container:
        name: cloudflare-ddns
        image: oznu/cloudflare-ddns:latest
        env:
          API_KEY: "{{ cloudflare_api_key }}"
          ZONE: "{{ root_domain }}"
          PROXIED: "true"
        restart_policy: always

    - name: Ensure Prometheus pve exporter Docker container is running
      community.docker.docker_container:
        name: prometheus-pve-exporter
        image: prompve/prometheus-pve-exporter:latest
        ports:
          - "9221:9221"
        volumes:
          - /root/prometheus-pve-exporter-conf.yml:/etc/pve.yml
        restart_policy: always

    - name: Ensure Prometheus Docker container is running
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus:latest
        ports:
          - "9090:9090"
        volumes:
          - /root/prometheus-conf.yml:/etc/prometheus/prometheus.yml
        restart_policy: always

    - name: Ensure Grafana Docker volume is present
      community.docker.docker_volume:
        name: grafana_data

    # scp root@192.168.178.103:/var/lib/docker/volumes/grafana_data/_data/grafana.db .\Desktop\
    - name: Ensure Grafana database are present on remote
      ansible.builtin.copy:
        src: ./config/grafana.db
        dest: /var/lib/docker/volumes/grafana_data/_data/grafana.db
        mode: "0660"
        owner: 472

    - name: Ensure Grafana Docker container is running
      community.docker.docker_container:
        name: grafana
        image: grafana/grafana-enterprise:latest
        # ports:
        #   - "3000:3000"
        networks:
          - name: web
        labels:
          traefik.enable: "true"
          traefik.http.routers.grafana.rule: "Host(`grafana.tbrouwer.com`)"
          traefik.http.routers.grafana.entrypoints: "web"
          traefik.http.services.grafana.loadbalancer.server.port: "3000"
        volumes:
          - /root/grafana.ini:/etc/grafana/grafana.ini
          - grafana_data:/var/lib/grafana
        restart_policy: always
